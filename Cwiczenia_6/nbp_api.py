# -*- coding: utf-8 -*-
"""NBP_API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BQdwTIXCM_B-cI4Ruf8cNvGZbMC6VXH4
"""

import requests
import pandas as pd
from google.colab import drive
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Podłączenie dysku Google
drive.mount('/content/drive')

# Ścieżka do folderu na dysku Google
folder_path = '/content/drive/My Drive/Ekstrakcja_danych/NBP_API/'

# Lista walut
currencies = ['USD', 'CHF', 'EUR', 'GBP', 'JPY']

# URL API
url = "http://api.nbp.pl/api/exchangerates/tables/A/last/25/"

"""# Wstępne pobranie danych"""

try:
    # Wysłanie zapytania HTTP
    response = requests.get(url)

    # Sprawdzenie czy zapytanie zakończyło się sukcesem
    if response.status_code == 200:
        # Pobranie danych w formacie JSON
        data = response.json()

        # Pusta lista do przechowywania danych
        exchange_rates_data = []

        # Iteracja po danych dla poszczególnych walut
        for rates_table in data:
            # Pobranie daty kursów
            effective_date = rates_table['effectiveDate']
            # Inicjalizacja słownika dla każdej daty
            date_info = {'Date': effective_date}

            # Iteracja po kursach walut
            for currency in currencies:
                currency_rate = None
                # Przeszukanie kursów
                for rate in rates_table['rates']:
                    if rate['code'] == currency:
                        currency_rate = rate['mid']
                        break
                # Dodanie kursu do słownika
                date_info[currency] = currency_rate

            # Dodanie kursu dla danej daty do listy
            exchange_rates_data.append(date_info)

        # Konwersja do DataFrame
        df = pd.DataFrame(exchange_rates_data)

        # Wybór kolumn z kursami walut (bez pierwszej kolumny z datami)
        currency_columns = df.drop(columns=['Date'])

        # Obliczenie średniej i odchylenia standardowego dla każdej kolumny
        means = currency_columns.mean()
        std_devs = currency_columns.std()

        # Utworzenie nowego DataFrame zawierającego tylko średnie i odchylenie standardowe
        summary_data = pd.DataFrame([means, std_devs], index=['Mean', 'Std Dev'])

        # Połączenie nowego DataFrame z oryginalnym DataFrame
        df_with_stats = pd.concat([df, summary_data])

        # Wyświetlenie tabeli
        print(df_with_stats)

    else:
        print("Błąd podczas pobierania danych:", response.status_code)

except Exception as e:
    print("Wystąpił błąd:", str(e))

"""# Normalizacja danych"""

try:
    # Wysłanie zapytania HTTP
    response = requests.get(url)

    # Sprawdzenie czy zapytanie zakończyło się sukcesem
    if response.status_code == 200:
        # Pobranie danych w formacie JSON
        data = response.json()

        # Pusta lista do przechowywania danych
        exchange_rates_data = []

        # Iteracja po danych dla poszczególnych walut
        for rates_table in data:
            # Pobranie daty kursów
            effective_date = rates_table['effectiveDate']
            # Inicjalizacja słownika dla każdej daty
            date_info = {'Date': effective_date}

            # Iteracja po kursach walut
            for currency in currencies:
                currency_rate = None
                # Przeszukanie kursów
                for rate in rates_table['rates']:
                    if rate['code'] == currency:
                        currency_rate = rate['mid']
                        break
                # Dodanie kursu do słownika
                date_info[currency] = currency_rate

            # Dodanie danych dla danej daty do listy
            exchange_rates_data.append(date_info)

        # Konwersja do DataFrame
        df = pd.DataFrame(exchange_rates_data)

        # Wybór kolumn z kursami walut (bez pierwszej kolumny z datami)
        currency_columns = df.drop(columns=['Date'])

        # Obliczenie średniej i odchylenia standardowego dla każdej kolumny
        means = currency_columns.mean()
        std_devs = currency_columns.std()

        # Normalizacja danych dla każdej kolumny
        normalized_data = (currency_columns - means) / std_devs

        # Utworzenie nowego DataFrame zawierającego znormalizowane dane
        normalized_df = pd.concat([df['Date'], normalized_data], axis=1)

        # Wyświetlenie tabeli z znormalizowanymi danymi
        print(normalized_df)

    else:
        print("Błąd podczas pobierania danych:", response.status_code)

except Exception as e:
    print("Wystąpił błąd:", str(e))

"""# CurrencyRate"""

try:
    # Wysłanie zapytania HTTP
    response = requests.get(url)

    # Sprawdzenie czy zapytanie zakończyło się sukcesem
    if response.status_code == 200:
        # Pobranie danych w formacie JSON
        data = response.json()

        # Inicjalizacja pustej listy
        exchange_rates_data = []

        # Iteracja po danych dla poszczególnych walut
        for rates_table in data:
            # Pobranie daty kursów
            effective_date = rates_table['effectiveDate']

            # Iteracja po kursach walut
            for currency in currencies:
                # Inicjalizacja słownika
                currency_data = {
                    'CurrencyID': currency,
                    'Date': effective_date,
                    'ExchangeRate': None,
                    'NormExchangeRate': None
                }
                # Przeszukanie kursów
                for rate in rates_table['rates']:
                    if rate['code'] == currency:
                        # Zamiana przecinków na kropki i konwersja na float
                        currency_data['ExchangeRate'] = float(str(rate['mid']).replace(',', '.'))
                        break
                # Dodanie danych do listy
                exchange_rates_data.append(currency_data)

        # Konwersja do DataFrame
        df = pd.DataFrame(exchange_rates_data)

        # Obliczenie średniej i odchylenia standardowego
        means = df.groupby('CurrencyID')['ExchangeRate'].transform('mean')
        std_devs = df.groupby('CurrencyID')['ExchangeRate'].transform('std')

        # Normalizacja danych dla każdej waluty
        df['NormExchangeRate'] = (df['ExchangeRate'] - means) / std_devs

        # Zaokrąglenie wartości NormExchangeRate do 4 miejsc po przecinku
        df['NormExchangeRate'] = df['NormExchangeRate'].round(4)

        # Zamiana kropek na przecinki
        df['ExchangeRate'] = df['ExchangeRate'].apply(lambda x: str(x).replace('.', ','))
        df['NormExchangeRate'] = df['NormExchangeRate'].apply(lambda x: str(x).replace('.', ','))

        # Wyświetlenie tabeli z danymi
        print(df)

    else:
        print("Błąd podczas pobierania danych:", response.status_code)

except Exception as e:
    print("Wystąpił błąd:", str(e))

# Zapisanie danych do pliku CSV
df.to_csv('/content/drive/My Drive/Ekstrakcja_danych/NBP_API/CurrencyRate.csv', index=False, sep=';')

"""# MeanExchangeRate"""

try:
    # Wysłanie zapytania HTTP
    response = requests.get(url)

    # Sprawdzenie czy zapytanie zakończyło się sukcesem
    if response.status_code == 200:
        # Pobranie danych w formacie JSON
        data = response.json()

        # Inicjalizacja pustej listy
        exchange_rates_data = []

        # Iteracja po danych dla poszczególnych walut
        for rates_table in data:
            # Pobranie daty kursów
            effective_date = rates_table['effectiveDate']
            # Inicjalizacja słownika dla danej daty
            date_info = {'Date': effective_date}

            # Iteracja po kursach walut
            for currency in currencies:
                currency_rate = None
                # Przeszukanie kursów
                for rate in rates_table['rates']:
                    if rate['code'] == currency:
                        currency_rate = rate['mid']
                        break
                # Dodanie kursu do słownika dla danej daty
                date_info[currency] = currency_rate

            # Dodanie danych do listy
            exchange_rates_data.append(date_info)

        # Konwersja do DataFrame
        df = pd.DataFrame(exchange_rates_data)

        # Usunięcie pierwszej kolumny (daty) z danych do obliczeń
        df_values = df.drop(columns=['Date'])

        # Obliczenie średniej dla każdej kolumny
        means = df_values.mean(axis=0, skipna=True)

        # Zaokrąglenie wartości średniej do 4 miejsc po przecinku
        means = means.round(4)

        # Utworzenie nowego DataFrame zawierającego nazwy walut i ich średnie wartości
        summary_data = pd.DataFrame({'CurrencyID': currencies, 'MeanExchangeRate': means.values})

        # Zamiana kropek na przecinki
        summary_data['MeanExchangeRate'] = summary_data['MeanExchangeRate'].apply(lambda x: str(x).replace('.', ','))

        # Wyświetlenie tabeli
        print(summary_data)

    else:
        print("Błąd podczas pobierania danych:", response.status_code)

except Exception as e:
    print("Wystąpił błąd:", str(e))

# Zapisanie danych do pliku CSV
summary_data.to_csv('/content/drive/My Drive/Ekstrakcja_danych/NBP_API/MeanExchangeRate.csv', index=False, sep=';')

"""# CurrencyName"""

try:
    # Wysłanie zapytania HTTP
    response = requests.get(url)

    # Sprawdzenie czy zapytanie zakończyło się sukcesem
    if response.status_code == 200:
        # Pobranie danych w formacie JSON
        data = response.json()

        # Inicjalizacja pustej listy
        currency_names = []

        # Iteracja po danych dla poszczególnych walut
        for currency in currencies:
            # Przeszukanie kursów w poszukiwaniu nazwy danej waluty
            for rate in data[0]['rates']:
                if rate['code'] == currency:
                    currency_name = rate['currency']
                    currency_names.append({'CurrencyID': currency, 'CurrencyName': currency_name})
                    break

        # Konwersja do DataFrame
        df = pd.DataFrame(currency_names)

        # Wyświetlenie tabeli
        print(df)

    else:
        print("Błąd podczas pobierania danych:", response.status_code)

except Exception as e:
    print("Wystąpił błąd:", str(e))

# Zapisanie danych do pliku CSV
df.to_csv('/content/drive/My Drive/Ekstrakcja_danych/NBP_API/CurrencyName.csv' , index=False, sep=';')

"""# CurrencyTable"""

try:
    # Wysłanie zapytania HTTP
    response = requests.get(url)

    # Sprawdzenie czy zapytanie zakończyło się sukcesem
    if response.status_code == 200:
        # Pobranie danych w formacie JSON
        data = response.json()

        # Inicjalizacja pustej listy
        exchange_rates_data = []

        # Iteracja po danych dla poszczególnych walut
        for rates_table in data:
            # Pobranie nazwy tabeli
            table_name = rates_table['table']

            # Iteracja po kursach walut
            for currency in currencies:
                # Inicjalizacja słownika
                currency_data = {
                    'CurrencyID': currency,
                    'TableExchangeRate': table_name
                }
                # Dodanie danych do listy
                if currency not in [d['CurrencyID'] for d in exchange_rates_data]:
                    exchange_rates_data.append(currency_data)

        # Konwersja do DataFrame
        df = pd.DataFrame(exchange_rates_data)

        # Wyświetlenie tabeli
        print(df)

    else:
        print("Błąd podczas pobierania danych:", response.status_code)

except Exception as e:
    print("Wystąpił błąd:", str(e))

# Zapisanie danych do pliku CSV
df.to_csv('/content/drive/My Drive/Ekstrakcja_danych/NBP_API/CurrencyTable.csv' , index=False, sep=';')

"""# Wyświetlenie diagramu (diagram utworzony w Microsoft SQL)"""

# Ścieżka do pliku PNG
file_path = '/content/drive/My Drive/Ekstrakcja_danych/NBP_API/diagram.png'

# Ustawienie rozmiaru obrazu
plt.figure(figsize=(15, 10))


# Wczytanie pliku PNG
img = mpimg.imread(file_path)

# Wyświetlenie obrazu
plt.imshow(img)
plt.axis('off')
plt.show()